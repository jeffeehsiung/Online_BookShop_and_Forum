# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Workflows/MergeRequest-Pipelines.gitlab-ci.yml

# Read more on when to use this template at
# https://docs.gitlab.com/ee/ci/yaml/#workflowrules

#define the base docker image file used for all jobs
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.

# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/

default:
  image: composer:2.5

# This folder is cached between builds
# https://docs.gitlab.com/ee/ci/yaml/index.html#cache
cache:
  paths:
    - node_modules/
    - vendor/

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

stages:
  - build
  - test
  - review
  - deploy
  - production

# Before we start any job, prepare the container with some extra configuration
# e.g. setting the ssh credentials, so we can later copy to shell.studev.groept.be
before-build:
  stage: build
  script:
    - pwd
    - composer update -W
    - composer install
    - composer require symfony/runtime
    - php bin/console cache:pool:clear cache.global_clearer
    - ls

build-job:       # This job runs in the build stage, which runs first.
  image: node:latest
  stage: build
  before_script:
    - npm install
  script:
    - npm run build


test-job:   # This job runs in the test stage.
  image: php:latest
  stage: test
  before_script:
    - apt-get update -yqq
    - apt-get install -yqq git libpq-dev libcurl4-gnutls-dev libicu-dev libvpx-dev libjpeg-dev libpng-dev libxpm-dev zlib1g-dev libfreetype6-dev libxml2-dev libexpat1-dev libbz2-dev libgmp3-dev libldap2-dev unixodbc-dev libsqlite3-dev libaspell-dev libsnmp-dev libpcre3-dev libtidy-dev libonig-dev libzip-dev
    - docker-php-ext-install mbstring pdo pdo_mysql pdo_pgsql curl intl gd xml zip bz2 opcache
  services:
    - mysql:8
  variables:
    # Configure mysql environment variables (https://hub.docker.com/r/_/mysql/)
    MYSQL_DATABASE: local_bookable
    MYSQL_USER: local_bookable
    MYSQL_PASSWORD: password
    MYSQL_ROOT_PASSWORD: password
    # set the correct DSN in Symfony to connect to the temporary database
#    DATABASE_URL: "mysql://local_bookable:password@localhost:3306/local_bookable?serverVersion=8&charset=utf8mb4"
    DATABASE_URL: "mysql://root:password@mysql/local_bookable"
  script:
#    - php bin/console doctrine:migrations:migrate --env=test
#    - php bin/console doctrine:fixtures:load --env=test --no-interaction
#    - php/bin/phpunit --configuration phpunit.xml.dist --testsuite UnitTests
    # use vendor/bin/phpunit to run only unit tests
    - vendor/bin/phpunit --configuration phpunit.xml.dist --testsuite UnitTests
    - php bin/console cache:clear
    - php bin/console cache:pool:clear cache.global_clearer


include:
  - template: Code-Quality.gitlab-ci.yml
code_quality:
  rules:
    - if: $CODE_QUALITY_DISABLED
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # Run code quality job in merge request pipelines
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH      # Run code quality job in pipelines on the default branch (but not in other branch pipelines)
    - if: $CI_COMMIT_TAG                               # Run code quality job in pipelines for tags
  services:
  stage: review
  tags:
    - cq-sans-dind     # Set this job to only run on our new specialized runner
  artifacts:
    paths: [gl-code-quality-report.json]

# Every job will start a container with a clone from the current repo
deploy-job:      # This job runs in the deploy stage.
  # run this job only when there is a push on the master branch 
  only:
    - main
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully
  script:
    - composer install
    # create a local .ssh folder in the container
    - mkdir -p ~/.ssh
    # start the ssh-agent and add the private key to the system
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    # add the fingerprint for shell.studev.groept.be as a trusted host
    - ssh-keyscan shell.studev.groept.be > ~/.ssh/known_hosts
    # host key fail? now after uninstalling runner?
    # install rsync to copy files to the web server
    # this container runs Alpine Linux, where apk is the package manager (not apt-get)
    - apk add rsync
    # rsync is a copy/sync tool we use to copy the current folder ./ to studev
    # we ignore the .git folder and the .env file
    # we delete the files on the remote server that are not present in the local copy
    - rsync -rv --exclude=".git/"
                --exclude=".env"
                --delete
                ./ a22web12@shell.studev.groept.be:/var/www/html
    # connect to the web server and run the composer install, composer update, chmod a+w -R /var/www/html/varâ€™, export the NVM_DIR variable, load the nvm, run the bash_completion, install npm and run the build then close connection
    - ssh -T a22web12@shell.studev.groept.be "cd /var/www/html && composer install && composer update && chmod a+w -R /var/www/html/var && export NVM_DIR=\"$HOME/.nvm\" && [ -s \"$NVM_DIR/nvm.sh\" ] && \. \"$NVM_DIR/nvm.sh\" && [ -s \"$NVM_DIR/bash_completion\" ] && \. \"$NVM_DIR/bash_completion\" && npm install && npm run build && exit