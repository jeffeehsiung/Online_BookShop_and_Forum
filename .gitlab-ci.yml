# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Workflows/MergeRequest-Pipelines.gitlab-ci.yml

# Read more on when to use this template at
# https://docs.gitlab.com/ee/ci/yaml/#workflowrules

#define the base docker image file used for all jobs

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

stages:
  - build
  - test
  # - code_quality
  - review
  - deploy
  - production

image: composer:2.5
# Before we start any job, prepare the container with some extra configuration
# e.g. setting the ssh credentials, so we can later copy to shell.studev.groept.be
before_script:
  # create a local .ssh folder in the container
  - mkdir -p ~/.ssh
  # start the ssh-agent and add the private key to the system
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | ssh-add -
  # add the fingerprint for shell.studev.groept.be as a trusted host
  - ssh-keyscan shell.studev.groept.be > ~/.ssh/known_hosts
  # install rsync to copy files to the web server
  # this container runs Alpine Linux, where apk is the package manager (not apt-get)
  - apk add rsync

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    # - echo "Clearing php cache"
    - composer require symfony/runtime
    - php bin/console cache:pool:clear cache.global_clearer
    - composer require symfony/webpack-encore-bundle
    - composer install
    - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
    - export NVM_DIR="$HOME/.nvm"
    - '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"'
    - yarn install
    - yarn add --dev @symfony/webpack-encore
    - yarn add webpack-notifier --dev
    - yarn encore dev

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    # - php bin/phpunit
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - echo "No lint issues found."

# code_quality:
#   stage: code_quality
#   image: node:latest
    # include:
    # - template: Code-Quality.gitlab-ci.yml
#   script:
#     - npm install -g eslint
#     - eslint --ext .js,.vue src/
      # - echo "official code quality tool: https://docs.codeclimate.com/docs/list-of-engines. "
      # - echo "yaml code quality set up reference web: https://docs.gitlab.com/ee/ci/testing/code_quality.html"
      # - echo "code quality demo youtube video: https://www.youtube.com/watch?v=B32LxtJKo9M"
#   artifacts:
#     reports:
#       codequality: gl-code-quality-report.json

# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/npm.gitlab-ci.yml

# Every job will start a container with a clone from the current repo
deploy-job:      # This job runs in the deploy stage.
  # run this job only when there is a push on the master branch 
  only:
    - main
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - composer install
    # rsync is a copy/sync tool we use to copy the current folder ./ to studev
    # we ignore the .git folder and the .env file
    # we delete the files on the remote server that are not present in the local copy
    - rsync -rv --exclude=".git/"
                --exclude=".env"
                --delete
                ./ a22web12@shell.studev.groept.be:/var/www/html
